plugins {
	id 'org.springframework.boot' version '2.6.7'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
}

group = 'com.mysite'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'


	//jpa, mariadb를 사용하기 위해 추가해주어야 한다(아래 두줄의 코드)
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	//-->Jpa를 사용하기 위한 의존성 주입
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
	//-->해당 라이브러리가 런타임시에만 필요

	//타임리프 사용을 위한 코드(아래 두개의 코드)
	//템플릿은 자바 코드를 사용할 수 있는 HTML이다(템플릿을 사용하기 위해서는 타임리프 템플릿 엔진을 추가해 주어야 한다.)
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect'

	//밸리데이션을 위한 코드
	implementation 'org.springframework.boot:spring-boot-starter-validation'

//	//아래 두개는 스프링 시큐리티를 사용하기 위한 의존성 주입
//	implementation 'org.springframework.boot:spring-boot-starter-security'
//	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'


	implementation 'org.springframework.boot:spring-boot-starter-validation'
//벨리데이션을 사용하면서 아래의 기능들이 사용 가능해진다
//	@Size	문자 길이를 제한한다.
//	@NotNull	Null을 허용하지 않는다.
//	@NotEmpty	Null 또는 빈 문자열("")을 허용하지 않는다.
//	@Past	과거 날짜만 가능
//	@Future	미래 날짜만 가능
//	@FutureOrPresent	미래 또는 오늘날짜만 가능
//	@Max	최대값
//	@Min	최소값
//	@Pattern	정규식으로 검증



}

tasks.named('test') {
	useJUnitPlatform()
}
